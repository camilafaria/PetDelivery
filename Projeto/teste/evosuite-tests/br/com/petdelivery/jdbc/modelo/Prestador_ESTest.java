/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 26 21:33:01 GMT 2017
 */

package br.com.petdelivery.jdbc.modelo;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.petdelivery.jdbc.modelo.Autonomo;
import br.com.petdelivery.jdbc.modelo.Petshop;
import br.com.petdelivery.jdbc.modelo.Prestador;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Prestador_ESTest extends Prestador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSomaQnt(2955);
      int int0 = prestador0.getSomaQnt();
      assertEquals(2955, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSomaNota(1696.735F);
      float float0 = prestador0.getSomaNota();
      assertEquals(1696.735F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSenha("r");
      String string0 = prestador0.getSenha();
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSenha("");
      String string0 = prestador0.getSenha();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Long long0 = new Long(0L);
      prestador0.setId_prestador(long0);
      Long long1 = prestador0.getId_prestador();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Long long0 = new Long(1L);
      prestador0.setId_prestador(long0);
      Long long1 = prestador0.getId_prestador();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setEmail(".jOn(m}DFBjoWa!gd");
      String string0 = prestador0.getEmail();
      assertEquals(".jOn(m}DFBjoWa!gd", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setEmail("");
      String string0 = prestador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Autonomo autonomo0 = new Autonomo();
      autonomo0.setNumero(192);
      prestador0.setAutonomo(autonomo0);
      Autonomo autonomo1 = prestador0.getAutonomo();
      assertNull(autonomo1.getCpf());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Autonomo autonomo0 = new Autonomo();
      autonomo0.setNumero((-1479));
      prestador0.setAutonomo(autonomo0);
      Autonomo autonomo1 = prestador0.getAutonomo();
      assertNull(autonomo1.getBairro());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Autonomo autonomo0 = new Autonomo();
      autonomo0.setDdd(1);
      prestador0.setAutonomo(autonomo0);
      Autonomo autonomo1 = prestador0.getAutonomo();
      assertNull(autonomo1.getCpf());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Autonomo autonomo0 = new Autonomo();
      autonomo0.setDdd((-1455));
      prestador0.setAutonomo(autonomo0);
      Autonomo autonomo1 = prestador0.getAutonomo();
      assertEquals(0, autonomo1.getNumero());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      float float0 = prestador0.getSomaNota();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Petshop petshop0 = new Petshop();
      prestador0.setPetshop(petshop0);
      Petshop petshop1 = prestador0.getPetshop();
      assertNull(petshop1.getCnpj());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Petshop petshop0 = prestador0.getPetshop();
      assertNull(petshop0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSomaNota((-1.0F));
      float float0 = prestador0.getSomaNota();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      String string0 = prestador0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      int int0 = prestador0.getSomaQnt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      String string0 = prestador0.getSenha();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Long long0 = new Long((-2156));
      prestador0.setId_prestador(long0);
      Long long1 = prestador0.getId_prestador();
      assertEquals((-2156L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Long long0 = prestador0.getId_prestador();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      prestador0.setSomaQnt((-2156));
      int int0 = prestador0.getSomaQnt();
      assertEquals((-2156), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Prestador prestador0 = new Prestador();
      Autonomo autonomo0 = prestador0.getAutonomo();
      assertNull(autonomo0);
  }
}
